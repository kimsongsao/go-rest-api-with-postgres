basePath: /api/v1
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  httputil.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  models.Post:
    properties:
      author:
        type: string
      body:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      draft:
        type: boolean
      id:
        type: integer
      likes:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
      updatedAt:
        type: string
    type: object
  requests.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  requests.PostRequest:
    properties:
      author:
        type: string
      body:
        type: string
      draft:
        type: boolean
      likes:
        type: integer
      title:
        type: string
      user_id:
        type: integer
    type: object
  requests.SignupRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: saokimsong@gmail.com
    name: Kimsong SAO
    url: https://www.linkedin.com/in/kimsongsao/
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Golang RESTful API with GIN, GORM & PostgreSQL
  version: "1.0"
paths:
  /posts:
    get:
      consumes:
      - application/json
      description: get posts
      parameters:
      - description: name search by q
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Show all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create post
      parameters:
      - description: Post Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.PostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by post ID
      parameters:
      - description: Post ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: get posts by ID
      parameters:
      - description: Post Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Show a post
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update post by ID
      parameters:
      - description: Post Id
        in: path
        name: id
        required: true
        type: integer
      - description: Post Update Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.PostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update a post
      tags:
      - posts
  /users:
    get:
      consumes:
      - application/json
      description: get users
      parameters:
      - description: name search by q
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Show all Users
      tags:
      - users
  /users/auth:
    post:
      consumes:
      - application/json
      description: Validate
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Validate
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Login
      tags:
      - users
  /users/signup:
    post:
      consumes:
      - application/json
      description: Create new an user
      parameters:
      - description: Signup Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: SignUp
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
